---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  namespace: bacchus-sgs
  name: bacchus-sgs-kubelet
spec:
  kubernetesSDConfigs:
    - apiServer: https://sommelier.snucse.org:6443
      tlsConfig:
        ca:
          secret:
            name: bacchus-sgs-sommelier-creds
            key: ca.crt
      authorization:
        credentials:
          name: bacchus-sgs-sommelier-creds
          key: token
      role: node
  scheme: HTTPS
  tlsConfig:
    ca:
      secret:
        name: bacchus-sgs-sommelier-creds
        key: ca.crt
    # NOTE: sketchy af
    insecureSkipVerify: true
  authorization:
    type: Bearer
    credentials:
      name: bacchus-sgs-sommelier-creds
      key: token
  metricsPath: /metrics/resource
  relabelings:
    - action: replace
      sourceLabels:
        - instance
      targetLabel: node
    - action: replace
      targetLabel: job
      replacement: kubelet
---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  namespace: bacchus-sgs
  name: bacchus-sgs-node-exporter
spec:
  kubernetesSDConfigs:
    - apiServer: https://sommelier.snucse.org:6443
      tlsConfig:
        ca:
          secret:
            name: bacchus-sgs-sommelier-creds
            key: ca.crt
      authorization:
        credentials:
          name: bacchus-sgs-sommelier-creds
          key: token
      role: endpoints
      namespaces:
        names:
          - bacchus-sgs
  proxyUrl: http://10.91.0.20:3128
  relabelings:
    - action: keep
      sourceLabels:
        - __meta_kubernetes_service_labelpresent_app_kubernetes_io_name
        - __meta_kubernetes_service_label_app_kubernetes_io_name
        - __meta_kubernetes_endpoint_port_name
      regex: true;prometheus-node-exporter;metrics
    - sourceLabels:
        - __meta_kubernetes_pod_node_name
      targetLabel: node
    - action: replace
      targetLabel: job
      replacement: node-exporter
---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  namespace: bacchus-sgs
  name: bacchus-sgs-kube-state-metrics
spec:
  kubernetesSDConfigs:
    - apiServer: https://sommelier.snucse.org:6443
      tlsConfig:
        ca:
          secret:
            name: bacchus-sgs-sommelier-creds
            key: ca.crt
      authorization:
        credentials:
          name: bacchus-sgs-sommelier-creds
          key: token
      role: endpoints
      namespaces:
        names:
          - bacchus-sgs
  proxyUrl: http://10.91.0.20:3128
  relabelings:
    - action: keep
      sourceLabels:
        - __meta_kubernetes_service_labelpresent_app_kubernetes_io_name
        - __meta_kubernetes_service_label_app_kubernetes_io_name
        - __meta_kubernetes_endpoint_port_name
      regex: true;kube-state-metrics;http
    - action: replace
      targetLabel: job
      replacement: kube-state-metrics
---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  namespace: bacchus-sgs
  name: bacchus-sgs-dcgm-exporter
spec:
  kubernetesSDConfigs:
    - apiServer: https://sommelier.snucse.org:6443
      tlsConfig:
        ca:
          secret:
            name: bacchus-sgs-sommelier-creds
            key: ca.crt
      authorization:
        credentials:
          name: bacchus-sgs-sommelier-creds
          key: token
      role: endpoints
      namespaces:
        names:
          - bacchus-sgs
  proxyUrl: http://10.91.0.20:3128
  relabelings:
    - action: keep
      sourceLabels:
        - __meta_kubernetes_service_labelpresent_app_kubernetes_io_name
        - __meta_kubernetes_service_label_app_kubernetes_io_name
        - __meta_kubernetes_endpoint_port_name
      regex: true;dcgm-exporter;metrics
    - sourceLabels:
        - __meta_kubernetes_pod_node_name
      targetLabel: node
    - action: replace
      targetLabel: job
      replacement: dcgm-exporter
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  namespace: bacchus-sgs
  name: bacchus-sgs-resources
  labels:
    app.kubernetes.io/name: bacchus-sgs-monitoring
    app.kubernetes.io/instance: bacchus-sgs-monitoring
spec:
  groups:
    - name: bacchus-sgs-resources
      rules:
        # capacity: resources physically available on each node
        - record: sgs:node_resource:capacity
          expr: |
            sum by (node, resource) (
              kube_node_status_capacity{node!~"control-.*",resource=~"cpu|memory|nvidia_com_gpu"}
            )
        # allocated/unallocated: resources reserved (requested) by pods
        - record: sgs:node_namespace_resource:allocated
          expr: |
            sum by (node, resource, namespace) (
                kube_pod_container_resource_requests{namespace=~"ws-.*",resource=~"cpu|memory|nvidia_com_gpu"}
              * on (namespace, pod) group_left ()
                kube_pod_status_phase{phase="Running"}
            )
        - record: sgs:node_resource:unallocated
          expr: |2
                sum by (node, resource) (
                  kube_node_status_allocatable{node!~"control-.*",resource=~"cpu|memory|nvidia_com_gpu"}
                )
              -
                sum by (node, resource) (
                    kube_pod_container_resource_requests
                  * on (namespace, pod) group_left ()
                    kube_pod_status_phase{phase="Running"}
                )
            or
              sum by (node, resource) (
                kube_node_status_allocatable{node!~"control-.*",resource=~"cpu|memory|nvidia_com_gpu"}
              )
        # used/unused: resources actually used by pods
        - record: sgs:node_namespace_resource:used
          labels:
            resource: cpu
          expr: |
            sum by (node, namespace) (rate(container_cpu_usage_seconds_total{namespace=~"ws-.*"}[5m]))
        - record: sgs:node_namespace_resource:used
          labels:
            resource: memory
          expr: |
            sum by (node, namespace) (container_memory_working_set_bytes{namespace=~"ws-.*"})
        - record: sgs:node_namespace_resource:used
          labels:
            resource: nvidia_com_gpu
          expr: |
            sum by (node, namespace) (clamp_max(DCGM_FI_DEV_GPU_UTIL{namespace=~"ws-.*"}, 1))
        - record: sgs:node_resource:unused
          labels:
            resource: cpu
          expr: |
            sum by (node) (rate(node_cpu_seconds_total{mode="idle",node!~"control-.*"}[5m]))
        - record: sgs:node_resource:unused
          labels:
            resource: memory
          expr: |
            sum by (node) (node_memory_MemAvailable_bytes{node!~"control-.*"})
        - record: sgs:node_resource:unused
          labels:
            resource: nvidia_com_gpu
          expr: |
            sum by (node) (1 - clamp_max(DCGM_FI_DEV_GPU_UTIL, 1))

        # alerts
        - alert: SGSGPUWaste
          for: 30m
          expr: |2
              1 - sgs:node_namespace_resource:used{resource="nvidia_com_gpu"}
              / (sgs:node_namespace_resource:allocated > 0)
            > 0
          annotations:
            summary: 'SGS GPU waste {{ $labels.node }}/{{ $labels.resource }} {{ $labels.namespace }}'
            description: |
              {{ $labels.namespace }} is wasting allocated {{ $labels.resource }} on {{ $labels.node }} for more than 15 minutes.
              Waste ratio is currently {{ humanizePercentage $value }}
        - alert: SGSResourceWaste
          for: 30m
          expr: |2
              1 - sgs:node_namespace_resource:used{resource!="nvidia_com_gpu"}
              / (sgs:node_namespace_resource:allocated > 0)
            > 0.5
          annotations:
            summary: 'SGS resource waste {{ $labels.node }}/{{ $labels.resource }} {{ $labels.namespace }}'
            description: |
              {{ $labels.namespace }} is wasting over 50% of allocated {{ $labels.resource }} on {{ $labels.node }} for more than 15 minutes.
              Waste ratio is currently {{ humanizePercentage $value }}
