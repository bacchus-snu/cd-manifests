# Reusable workflow called from code repositories
name: Deploy to bacchus-snu/cd-manifests

on:
  workflow_call:
    inputs:
      application:
        description: application as specified in mappiapplication as specified in mapping.yaml
        type: string
        required: true
      image:
        description: full image name
        type: string
        required: true
      tag:
        description: image tag
        type: string
        required: true
    secrets:
      app-id:
        description: GitHub App ID
        required: true
      app-private-key:
        description: GitHub App private key
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Fetch app details:
      #   - app installation token (for commit access)
      #   - app bot username & id (for commit message)
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install script dependencies
        run: npm install @octokit/request @octokit/rest @octokit/auth-app
      - name: Fetch app details
        uses: actions/github-script@v6
        id: app-details
        env:
          APP_ID: ${{ secrets.app-id }}
          APP_PRIVATE_KEY: ${{ secrets.app-private-key }}
        with:
          script: |
            const { Octokit } = require('@octokit/rest')
            const { createAppAuth } = require('@octokit/auth-app')
            const { request } = require('@octokit/request')

            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              },
              request: { fetch },
            })

            const { data: { id: installationId } } = await appOctokit.rest.apps.getRepoInstallation({
              owner: 'bacchus-snu',
              repo: 'cd-manifests',
            })

            const octokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
                installationId,
              },
              request: { fetch },
            })
            const { data: { slug } } = await octokit.rest.apps.getAuthenticated()
            const appBot = `${slug}[bot]`,
            const { data: { id: appBotId } } = await octokit.rest.users.getByUsername({
              username: appBot,
            })

            const { token } = await await createAppAuth({
              appId: process.env.APP_ID,
              privateKey: process.env.APP_PRIVATE_KEY,
              installationId,
              request: request.defaults({
                request: { fetch },
              })
            })({ type: "installation" })

            core.setOutput('appBot', appBot)
            core.setOutput('appBotId', appBotId)
            core.setSecret(token)
            core.setOutput('token', token)

      # Apply patches
      - uses: actions/checkout@v3
        with:
          repository: bacchus-snu/cd-manifests
          ref: main
          token: ${{ steps.app-details.outputs.token }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r scripts/requirements.txt
      - name: Apply patches
        run: ./script/patch_application.py "$APPLICATION" "$IMAGE" "$TAG"
        env:
          APPLICATION: ${{ inputs.application }}
          IMAGE: ${{ inputs.image }}
          TAG: ${{ inputs.tag }}

      - name: Commit changes
        run: |
          git commit -a \
            -m "Deploy $APPLICATION" \
            -m "Deployed by $FROM_WORKFLOW triggered from $FROM_REPO@$FROM_SHA"

          # retry up to two times
          git pull --rebase && git push || \
          sleep $(( 1 + 10 * RANDOM / 32767 )) && git pull --rebase && git push || \
          sleep $(( 1 + 10 * RANDOM / 32767 )) && git pull --rebase && git push || \
          exit 1
        env:
          GIT_COMMITTER_NAME: ${{ steps.app-details.outputs.appBot }}
          GIT_COMMITTER_EMAIL: ${{ steps.app-details.outputs.appBotId }}+${{ steps.app-details.outputs.appBot }}@users.noreply.github.com
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_AUTHOR_EMAIL: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com

          APPLICATION: ${{ inputs.application }}
          FROM_WORKFLOW: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          FROM_REPO: ${{ github.repository }}
          FROM_SHA: ${{ github.sha }}
